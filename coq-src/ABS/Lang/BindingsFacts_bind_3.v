Require Import Lang.Syntax Lang.Bindings.
Require Import Lang.BindingsFacts_map.
Require Import Lang.BindingsFacts_bind_0.
Set Implicit Arguments.

Implicit Types EV HV V L : Set.

Section section_EV_bind_V_map.

Fixpoint
  EV_bind_V_map_hd (EV EV' HV V V' L : Set)
  (g : V ‚Üí V') (f : EV ‚Üí eff EV' HV L)
  (h : hd EV HV V L) {struct h} :
  EV_bind_hd f (V_map_hd g h) = V_map_hd g (EV_bind_hd f h)
with
  EV_bind_V_map_tm (EV EV' HV V V' L : Set)
  (g : V ‚Üí V') (f : EV ‚Üí eff EV' HV L)
  (t : tm EV HV V L) {struct t} :
  EV_bind_tm f (V_map_tm g t) = V_map_tm g (EV_bind_tm f t)
with
  EV_bind_V_map_val (EV EV' HV V V' L : Set)
  (g : V ‚Üí V') (f : EV ‚Üí eff EV' HV L)
  (v : val EV HV V L) {struct v} :
  EV_bind_val f (V_map_val g v) = V_map_val g (EV_bind_val f v).
Proof.
+ destruct h ; crush.
+ destruct t ; crush.
+ destruct v ; crush.
Qed.

Hint Rewrite EV_bind_V_map_tm EV_bind_V_map_val.

End section_EV_bind_V_map.


Section section_HV_bind_xx_map.

Definition
HV_bind_xx_map_lbl EV EV' HV HV' V V' L
(f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V' L)
(H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
(l : lbl HV L) :
HV_bind_lbl f‚ÇÅ l = HV_bind_lbl f‚ÇÇ l.
Proof.
destruct l ; simpl ; crush.
Qed.

Definition
HV_bind_xx_map_ef EV HV HV' V V' L
(f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
(H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
(Œµ : ef EV HV L) :
HV_bind_ef f‚ÇÅ Œµ = HV_bind_ef f‚ÇÇ Œµ.
Proof.
destruct Œµ ; simpl ; [ crush | ].
erewrite HV_bind_xx_map_lbl ; crush.
Qed.

Fixpoint
HV_bind_xx_map_eff EV HV HV' V V' L
(f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
(H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
(Œµ : eff EV HV L) :
HV_bind_eff f‚ÇÅ Œµ = HV_bind_eff f‚ÇÇ Œµ.
Proof.
destruct Œµ ; simpl ;
try erewrite HV_bind_xx_map_ef ;
try erewrite HV_bind_xx_map_eff ;
crush.
Qed.

Hint Rewrite lbl_EV_map_hd lbl_HV_map_hd.

Fixpoint
HV_bind_xx_map_ty EV HV HV' V V' L
(f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
(H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
(T : ty EV HV L) :
HV_bind_ty f‚ÇÅ T = HV_bind_ty f‚ÇÇ T.
Proof.
destruct T ; simpl.
+ crush.
+ erewrite HV_bind_xx_map_ty with (f‚ÇÅ := f‚ÇÅ) (f‚ÇÇ := f‚ÇÇ) ; [ | crush ].
  erewrite HV_bind_xx_map_ty with (f‚ÇÅ := f‚ÇÅ) (f‚ÇÇ := f‚ÇÇ) ; [ | crush ].
  erewrite HV_bind_xx_map_eff ; crush.
+ erewrite HV_bind_xx_map_ty ; crush.
+ erewrite HV_bind_xx_map_ty ; crush.
Qed.

End section_HV_bind_xx_map.


Section section_HV_bind_V_map.

Local Fact
  HV_bind_V_map_aux1 (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV,
V_map_hd (map_inc (map_inc g)) ((V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÅ) x) =
(V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro x ; unfold compose ; rewrite <- H.
repeat erewrite V_map_map_hd ; crush.
repeat erewrite V_map_map_hd ; crush.
Qed.

Local Fact
  HV_bind_V_map_aux2 (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, V_map_hd (map_inc g) ((V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro x ; unfold compose ; rewrite <- H.
repeat erewrite V_map_map_hd ; crush.
Qed.

Local Fact
  HV_bind_V_map_aux3 (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, V_map_hd g ((L_shift_hd ‚àò f‚ÇÅ) x) = (L_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro x ; unfold compose ; rewrite <- H.
erewrite V_L_map_hd ; crush.
Qed.

Local Fact
  HV_bind_V_map_aux4 (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, V_map_hd g ((EV_shift_hd ‚àò f‚ÇÅ) x) = (EV_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
erewrite EV_V_map_hd ; crush.
Qed.

Local Fact
  HV_bind_V_map_aux5 (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : inc HV, V_map_hd g (HV_lift_inc f‚ÇÅ x) = HV_lift_inc f‚ÇÇ x.
Proof.
destruct x as [ | x ] ; simpl ; [ crush | ].
rewrite <- HV_V_map_hd ; crush.
Qed.

Hint Resolve HV_bind_V_map_aux1 HV_bind_V_map_aux2 HV_bind_V_map_aux3
  HV_bind_V_map_aux4 HV_bind_V_map_aux5.

Hint Extern 1 => match goal with
| [ H : ‚àÄ x, V_map_hd ?g (?f‚ÇÅ x) = ?f‚ÇÇ x |- lbl_hd (?f‚ÇÅ _) = lbl_hd (?f‚ÇÇ _) ] =>
  erewrite <- lbl_V_map_hd ; rewrite H
end.

Fixpoint
  HV_bind_V_map_hd (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (h : hd EV HV V L) {struct h} :
  HV_bind_hd f‚ÇÇ (V_map_hd g h) = V_map_hd g (HV_bind_hd f‚ÇÅ h)
with
  HV_bind_V_map_tm (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (t : tm EV HV V L) {struct t} :
  HV_bind_tm f‚ÇÇ (V_map_tm g t) = V_map_tm g (HV_bind_tm f‚ÇÅ t)
with
  HV_bind_V_map_val (EV HV HV' V V' L : Set)
  (g : V ‚Üí V') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V' L)
  (H : ‚àÄ x, V_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (v : val EV HV V L) {struct v} :
  HV_bind_val f‚ÇÇ (V_map_val g v) = V_map_val g (HV_bind_val f‚ÇÅ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite HV_bind_V_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite HV_bind_V_map_tm ;
  repeat erewrite HV_bind_V_map_hd ;
  repeat erewrite HV_bind_V_map_val ;
  repeat erewrite HV_bind_xx_map_ty with (f‚ÇÅ := f‚ÇÅ) (f‚ÇÇ := f‚ÇÇ) ;
  repeat erewrite HV_bind_xx_map_eff with (f‚ÇÅ := f‚ÇÅ) (f‚ÇÇ := f‚ÇÇ) ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite HV_bind_V_map_tm ;
  repeat erewrite HV_bind_V_map_hd ;
  crush.
Qed.

Hint Rewrite HV_bind_V_map_tm HV_bind_V_map_val.

End section_HV_bind_V_map.


Section section_L_bind_V_map.

Fixpoint
  L_bind_V_map_hd (EV HV V V' L L' : Set)
  (g : V ‚Üí V') (f : L ‚Üí lid L')
  (h : hd EV HV V L) {struct h} :
  L_bind_hd f (V_map_hd g h) = V_map_hd g (L_bind_hd f h)
with
  L_bind_V_map_tm (EV HV V V' L L' : Set)
  (g : V ‚Üí V') (f : L ‚Üí lid L')
  (t : tm EV HV V L) {struct t} :
  L_bind_tm f (V_map_tm g t) = V_map_tm g (L_bind_tm f t)
with
  L_bind_V_map_val (EV HV V V' L L' : Set)
  (g : V ‚Üí V') (f : L ‚Üí lid L')
  (v : val EV HV V L) {struct v} :
  L_bind_val f (V_map_val g v) = V_map_val g (L_bind_val f v).
Proof.
+ destruct h ; crush.
+ destruct t ; crush.
+ destruct v ; crush.
Qed.

Hint Rewrite L_bind_V_map_tm L_bind_V_map_val.

End section_L_bind_V_map.


Section section_EV_bind_HV_map.

Local Fact EV_bind_HV_map_aux1 (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x)) :
  ‚àÄ x : inc EV, EV_lift_inc f‚ÇÅ x = HV_map_eff g (EV_lift_inc f‚ÇÇ x).
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite Hf, EV_HV_map_eff ; crush.
Qed.

Local Fact EV_bind_HV_map_aux2 (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x)) :
  ‚àÄ x : EV, (HV_shift_eff ‚àò f‚ÇÅ) x = HV_map_eff (map_inc g) ((HV_shift_eff ‚àò f‚ÇÇ) x).
Proof.
  intro ; unfold compose.
  rewrite Hf.
  repeat erewrite HV_map_map_eff ; crush.
Qed.

Local Fact EV_bind_HV_map_aux3 (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x)) :
  ‚àÄ x : EV, (L_shift_eff ‚àò f‚ÇÅ) x = HV_map_eff g ((L_shift_eff ‚àò f‚ÇÇ) x).
Proof.
  intro ; unfold compose.
  rewrite Hf.
  repeat erewrite HV_L_map_eff ; crush.
Qed.

Hint Resolve EV_bind_HV_map_aux1 EV_bind_HV_map_aux2 EV_bind_HV_map_aux3.

Definition
  EV_bind_HV_map_ef (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (Œµ : ef EV HV L) :
  EV_bind_ef f‚ÇÅ (HV_map_ef g Œµ) = HV_map_eff g (EV_bind_ef f‚ÇÇ Œµ)
.
Proof.
destruct Œµ ; simpl ; crush.
Qed.

Fixpoint
  EV_bind_HV_map_eff (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (ùìî : eff EV HV L) {struct ùìî} :
  EV_bind_eff f‚ÇÅ (HV_map_eff g ùìî) = HV_map_eff g (EV_bind_eff f‚ÇÇ ùìî)
.
Proof.
destruct ùìî ; simpl ; [ crush | ].
rewrite <- HV_map_eff_app.
erewrite EV_bind_HV_map_ef, EV_bind_HV_map_eff ; crush.
Qed.

Fixpoint
  EV_bind_HV_map_ty (EV EV' HV HV' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (T : ty EV HV L) {struct T} :
  EV_bind_ty f‚ÇÅ (HV_map_ty g T) = HV_map_ty g (EV_bind_ty f‚ÇÇ T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite EV_bind_HV_map_ty ;
  repeat erewrite EV_bind_HV_map_eff ;
  repeat erewrite EV_bind_HV_map_lbl ;
  crush.
Qed.

Fixpoint
  EV_bind_HV_map_hd (EV EV' HV HV' V L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (h : hd EV HV V L) {struct h} :
  EV_bind_hd f‚ÇÅ (HV_map_hd g h) = HV_map_hd g (EV_bind_hd f‚ÇÇ h)
with
  EV_bind_HV_map_tm (EV EV' HV HV' V L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (t : tm EV HV V L) {struct t} :
  EV_bind_tm f‚ÇÅ (HV_map_tm g t) = HV_map_tm g (EV_bind_tm f‚ÇÇ t)
with
  EV_bind_HV_map_val (EV EV' HV HV' V L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' L) (f‚ÇÇ : EV ‚Üí eff EV' HV L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x))
  (v : val EV HV V L) {struct v} :
  EV_bind_val f‚ÇÅ (HV_map_val g v) = HV_map_val g (EV_bind_val f‚ÇÇ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite EV_bind_HV_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite EV_bind_HV_map_tm ;
  repeat erewrite EV_bind_HV_map_hd ;
  repeat erewrite EV_bind_HV_map_val ;
  repeat erewrite EV_bind_HV_map_ty ;
  repeat erewrite EV_bind_HV_map_eff ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite EV_bind_HV_map_tm ;
  repeat erewrite EV_bind_HV_map_hd ;
  crush.
Qed.

Lemma EV_bind_HV_map_XEnv
(EV EV' HV HV' : Set)
(g : HV ‚Üí HV') (f‚ÇÅ : EV ‚Üí eff EV' HV' ‚àÖ) (f‚ÇÇ : EV ‚Üí eff EV' HV ‚àÖ)
(Hf : ‚àÄ x, f‚ÇÅ x = HV_map_eff g (f‚ÇÇ x)) (Œû : XEnv EV HV) :
EV_bind_XEnv f‚ÇÅ (HV_map_XEnv g Œû) = HV_map_XEnv g (EV_bind_XEnv f‚ÇÇ Œû).
Proof.
induction Œû as [ | ? ? [] ] using env_ind.
+ repeat (rewrite HV_map_XEnv_empty || rewrite EV_bind_XEnv_empty).
  reflexivity.
+ repeat rewrite EV_bind_XEnv_concat, HV_map_XEnv_concat,
    EV_bind_XEnv_single, HV_map_XEnv_single.
  erewrite EV_bind_HV_map_ty, EV_bind_HV_map_eff, IHŒû ; crush.
Qed.

End section_EV_bind_HV_map.


Section section_HV_bind_EV_map.

Definition
  HV_bind_EV_map_ef (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
  (Œµ : ef EV HV L) :
  HV_bind_ef f‚ÇÇ (EV_map_ef g Œµ) = EV_map_ef g (HV_bind_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; simpl ; [ crush | ].
erewrite HV_bind_xx_map_lbl with (f‚ÇÅ := f‚ÇÅ) (f‚ÇÇ := f‚ÇÇ) ;
crush.
Qed.

Fixpoint
  HV_bind_EV_map_eff (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
  (ùìî : eff EV HV L) {struct ùìî} :
  HV_bind_eff f‚ÇÇ (EV_map_eff g ùìî) = EV_map_eff g (HV_bind_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; simpl ; [ crush | ].
repeat erewrite HV_bind_EV_map_ef ;
repeat erewrite HV_bind_EV_map_eff ;
crush.
Qed.

Hint Rewrite lbl_EV_map_hd lbl_HV_map_hd.

Fixpoint
  HV_bind_EV_map_ty (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
  (T : ty EV HV L) {struct T} :
  HV_bind_ty f‚ÇÇ (EV_map_ty g T) = EV_map_ty g (HV_bind_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite HV_bind_EV_map_ty ;
  repeat erewrite HV_bind_EV_map_eff ;
  crush.
Qed.

Local Fact HV_bind_EV_map_aux1
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : HV,
  EV_map_hd g ((V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
repeat erewrite V_map_map_hd ;
repeat erewrite EV_V_map_hd ;
crush.
Qed.

Local Fact HV_bind_EV_map_aux2
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : HV, EV_map_hd g ((V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H ; rewrite EV_V_map_hd ; crush.
Qed.

Local Fact HV_bind_EV_map_aux3
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, EV_map_hd g ((L_shift_hd ‚àò f‚ÇÅ) x) = (L_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H ; rewrite EV_L_map_hd ; crush.
Qed.

Local Fact HV_bind_EV_map_aux4
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, EV_map_hd g ((V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite EV_V_map_hd ; crush.
Qed.

Local Fact HV_bind_EV_map_aux5
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, EV_map_hd (map_inc g) ((EV_shift_hd ‚àò f‚ÇÅ) x) = (EV_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
repeat erewrite EV_map_map_hd ; crush.
Qed.

Local Fact HV_bind_EV_map_aux6
  (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : inc HV, EV_map_hd g (HV_lift_inc f‚ÇÅ x) = HV_lift_inc f‚ÇÇ x.
Proof.
destruct x ; simpl ; [ crush | ].
rewrite EV_HV_map_hd ; crush.
Qed.

Hint Resolve HV_bind_EV_map_aux1 HV_bind_EV_map_aux2 HV_bind_EV_map_aux3
  HV_bind_EV_map_aux4 HV_bind_EV_map_aux5 HV_bind_EV_map_aux6.

Hint Extern 1 => match goal with
| [ H : ‚àÄ x, EV_map_hd ?g (?f‚ÇÅ x) = ?f‚ÇÇ x |- lbl_hd (?f‚ÇÅ _) = lbl_hd (?f‚ÇÇ _) ] =>
  erewrite <- lbl_EV_map_hd ; rewrite H
end.

Fixpoint
  HV_bind_EV_map_hd (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (h : hd EV HV V L) {struct h} :
  HV_bind_hd f‚ÇÇ (EV_map_hd g h) = EV_map_hd g (HV_bind_hd f‚ÇÅ h)
with
  HV_bind_EV_map_tm (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (t : tm EV HV V L) {struct t} :
  HV_bind_tm f‚ÇÇ (EV_map_tm g t) = EV_map_tm g (HV_bind_tm f‚ÇÅ t)
with
  HV_bind_EV_map_val (EV EV' HV HV' V L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV' HV' V L)
  (H : ‚àÄ x, EV_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (v : val EV HV V L) {struct v} :
  HV_bind_val f‚ÇÇ (EV_map_val g v) = EV_map_val g (HV_bind_val f‚ÇÅ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite HV_bind_EV_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite HV_bind_EV_map_tm ;
  repeat erewrite HV_bind_EV_map_hd ;
  repeat erewrite HV_bind_EV_map_val ;
  repeat erewrite HV_bind_EV_map_ty ;
  repeat erewrite HV_bind_EV_map_eff ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite HV_bind_EV_map_tm ;
  repeat erewrite HV_bind_EV_map_hd ;
  crush.
Qed.

Lemma HV_bind_EV_map_XEnv
(EV EV' HV HV' V : Set)
(g : EV ‚Üí EV') (f‚ÇÅ : HV ‚Üí hd EV HV' V _) (f‚ÇÇ : HV ‚Üí hd EV' HV' V _)
(H : ‚àÄ x, lbl_hd (f‚ÇÅ x) = lbl_hd (f‚ÇÇ x))
(Œû : XEnv EV HV) :
EV_map_XEnv g (HV_bind_XEnv f‚ÇÅ Œû) = HV_bind_XEnv f‚ÇÇ (EV_map_XEnv g Œû).
Proof.
induction Œû as [ | ? ? [] ] using env_ind.
+ repeat rewrite EV_map_XEnv_empty, HV_bind_XEnv_empty.
  reflexivity.
+ repeat rewrite
    EV_map_XEnv_concat, HV_bind_XEnv_concat,
    EV_map_XEnv_single, HV_bind_XEnv_single.
  erewrite HV_bind_EV_map_ty, HV_bind_EV_map_eff, IHŒû ;
  crush.
Qed.

End section_HV_bind_EV_map.


Section section_EV_bind_L_map.

Local Fact EV_bind_L_map_aux1
  (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : inc EV, L_map_eff g (EV_lift_inc f‚ÇÅ x) = EV_lift_inc f‚ÇÇ x.
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite <- H.
  erewrite EV_L_map_eff ; crush.
Qed.

Local Fact EV_bind_L_map_aux2
  (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : EV, L_map_eff g ((HV_shift_eff ‚àò f‚ÇÅ) x) = (HV_shift_eff ‚àò f‚ÇÇ) x.
Proof.
  intro ; unfold compose ; rewrite <- H.
  erewrite HV_L_map_eff ; crush.
Qed.

Local Fact EV_bind_L_map_aux3
  (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : EV, L_map_eff (map_inc g) ((L_shift_eff ‚àò f‚ÇÅ) x) = (L_shift_eff ‚àò f‚ÇÇ) x.
Proof.
  intro ; unfold compose ; rewrite <- H.
  repeat erewrite L_map_map_eff ; crush.
Qed.

Hint Resolve EV_bind_L_map_aux1 EV_bind_L_map_aux2 EV_bind_L_map_aux3.

Definition
  EV_bind_L_map_ef (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (Œµ : ef EV HV L) :
  EV_bind_ef f‚ÇÇ (L_map_ef g Œµ) = L_map_eff g (EV_bind_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; simpl ; crush.
Qed.

Hint Resolve L_map_eff_app.

Fixpoint
  EV_bind_L_map_eff (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (ùìî : eff EV HV L) {struct ùìî} :
  EV_bind_eff f‚ÇÇ (L_map_eff g ùìî) = L_map_eff g (EV_bind_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; simpl ;
repeat erewrite EV_bind_L_map_ef ;
repeat erewrite EV_bind_L_map_eff ;
crush.
Qed.

Fixpoint
  EV_bind_L_map_ty (EV EV' HV L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (T : ty EV HV L) {struct T} :
  EV_bind_ty f‚ÇÇ (L_map_ty g T) = L_map_ty g (EV_bind_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite EV_bind_L_map_ty ;
  repeat erewrite EV_bind_L_map_eff ;
  crush.
Qed.

Fixpoint
  EV_bind_L_map_hd (EV EV' HV V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (h : hd EV HV V L) {struct h} :
  EV_bind_hd f‚ÇÇ (L_map_hd g h) = L_map_hd g (EV_bind_hd f‚ÇÅ h)
with
  EV_bind_L_map_tm (EV EV' HV V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (t : tm EV HV V L) {struct t} :
  EV_bind_tm f‚ÇÇ (L_map_tm g t) = L_map_tm g (EV_bind_tm f‚ÇÅ t)
with
  EV_bind_L_map_val (EV EV' HV V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : EV ‚Üí eff EV' HV L) (f‚ÇÇ : EV ‚Üí eff EV' HV L')
  (H : ‚àÄ x, L_map_eff g (f‚ÇÅ x) = f‚ÇÇ x)
  (v : val EV HV V L) {struct v} :
  EV_bind_val f‚ÇÇ (L_map_val g v) = L_map_val g (EV_bind_val f‚ÇÅ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite EV_bind_L_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite EV_bind_L_map_ty ;
  repeat erewrite EV_bind_L_map_eff ;
  repeat erewrite EV_bind_L_map_tm ;
  repeat erewrite EV_bind_L_map_hd ;
  repeat erewrite EV_bind_L_map_val ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite EV_bind_L_map_tm ;
  repeat erewrite EV_bind_L_map_hd ;
  crush.
Qed.

End section_EV_bind_L_map.


Section section_HV_bind_L_map.

Hint Rewrite lbl_L_map_hd.

Definition
  HV_bind_L_map_lbl (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x))
  (‚Ñì : lbl HV L) :
  HV_bind_lbl f‚ÇÇ (L_map_lbl g ‚Ñì) = L_map_lbl g (HV_bind_lbl f‚ÇÅ ‚Ñì)
.
Proof.
destruct ‚Ñì ; simpl ; [ | crush ].
rewrite <- H ; crush.
Qed.

Definition
  HV_bind_L_map_ef (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x))
  (Œµ : ef EV HV L) :
  HV_bind_ef f‚ÇÇ (L_map_ef g Œµ) = L_map_ef g (HV_bind_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; simpl ; [ crush | ].
erewrite HV_bind_L_map_lbl ; crush.
Qed.

Fixpoint
  HV_bind_L_map_eff (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x))
  (ùìî : eff EV HV L) {struct ùìî} :
  HV_bind_eff f‚ÇÇ (L_map_eff g ùìî) = L_map_eff g (HV_bind_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; simpl ;
repeat erewrite HV_bind_L_map_ef ;
repeat erewrite HV_bind_L_map_eff ;
crush.
Qed.

Local Fact HV_bind_L_map_aux1
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x)) :
‚àÄ x : HV,
lbl_hd (L_map_hd g ((EV_shift_hd ‚àò f‚ÇÅ) x)) = lbl_hd ((EV_shift_hd ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose.
rewrite <- EV_L_map_hd.
repeat rewrite lbl_EV_map_hd.
crush.
Qed.

Local Fact HV_bind_L_map_aux2
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x)) :
‚àÄ x : inc HV,
lbl_hd (L_map_hd g (HV_lift_inc f‚ÇÅ x)) = lbl_hd (HV_lift_inc f‚ÇÇ x).
Proof.
destruct x ; simpl ; [ crush | ].
rewrite <- HV_L_map_hd.
repeat rewrite lbl_HV_map_hd.
crush.
Qed.

Hint Resolve HV_bind_L_map_aux1 HV_bind_L_map_aux2.

Fixpoint
  HV_bind_L_map_ty (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, lbl_hd (L_map_hd g (f‚ÇÅ x)) = lbl_hd (f‚ÇÇ x))
  (T : ty EV HV L) {struct T} :
  HV_bind_ty f‚ÇÇ (L_map_ty g T) = L_map_ty g (HV_bind_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite HV_bind_L_map_ty ;
  repeat erewrite HV_bind_L_map_eff ;
  crush.
Qed.

Local Fact HV_bind_L_map_aux3
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : inc HV, L_map_hd g (HV_lift_inc f‚ÇÅ x) = HV_lift_inc f‚ÇÇ x.
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite <- HV_L_map_hd ; crush.
Qed.

Local Fact HV_bind_L_map_aux4
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : HV, L_map_hd (map_inc g) ((L_shift_hd ‚àò f‚ÇÅ) x) = (L_shift_hd ‚àò f‚ÇÇ) x.
Proof.
  intro ; unfold compose.
  rewrite <- H.
  repeat erewrite L_map_map_hd ; crush.
Qed.

Local Fact HV_bind_L_map_aux5
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
  ‚àÄ x : HV,
  L_map_hd g ((V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
repeat erewrite V_map_map_hd ;
repeat rewrite V_L_map_hd ;
crush.
Qed.

Local Fact HV_bind_L_map_aux6
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, L_map_hd g ((V_shift_hd ‚àò f‚ÇÅ) x) = (V_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
rewrite V_L_map_hd ; crush.
Qed.

Local Fact HV_bind_L_map_aux7
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV, L_map_hd (map_inc g) ((L_shift_hd ‚àò f‚ÇÅ) x) = (L_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose ; rewrite <- H.
repeat erewrite L_map_map_hd ; crush.
Qed.

Local Fact HV_bind_L_map_aux8
  (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x) :
‚àÄ x : HV,
L_map_hd g ((EV_shift_hd ‚àò f‚ÇÅ) x) = (EV_shift_hd ‚àò f‚ÇÇ) x.
Proof.
intro ; unfold compose.
rewrite <- EV_L_map_hd.
crush.
Qed.

Hint Resolve HV_bind_L_map_aux3 HV_bind_L_map_aux4 HV_bind_L_map_aux5
  HV_bind_L_map_aux6 HV_bind_L_map_aux7 HV_bind_L_map_aux8.

Fixpoint
  HV_bind_L_map_hd (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (h : hd EV HV V L) {struct h} :
  HV_bind_hd f‚ÇÇ (L_map_hd g h) = L_map_hd g (HV_bind_hd f‚ÇÅ h)
with
  HV_bind_L_map_tm (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (t : tm EV HV V L) {struct t} :
  HV_bind_tm f‚ÇÇ (L_map_tm g t) = L_map_tm g (HV_bind_tm f‚ÇÅ t)
with
  HV_bind_L_map_val (EV HV HV' V L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : HV ‚Üí hd EV HV' V L) (f‚ÇÇ : HV ‚Üí hd EV HV' V L')
  (H : ‚àÄ x, L_map_hd g (f‚ÇÅ x) = f‚ÇÇ x)
  (v : val EV HV V L) {struct v} :
  HV_bind_val f‚ÇÇ (L_map_val g v) = L_map_val g (HV_bind_val f‚ÇÅ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite HV_bind_L_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite HV_bind_L_map_tm ;
  repeat erewrite HV_bind_L_map_hd ;
  repeat erewrite HV_bind_L_map_val ;
  repeat erewrite HV_bind_L_map_ty ;
  repeat erewrite HV_bind_L_map_eff ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite HV_bind_L_map_tm ;
  repeat erewrite HV_bind_L_map_hd ;
  crush.
Qed.

End section_HV_bind_L_map.


Section section_V_bind_EV_map.

Local Fact V_bind_EV_map_aux1 (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x)) :
  ‚àÄ x : inc V, V_lift_inc f‚ÇÅ x = EV_map_val g (V_lift_inc f‚ÇÇ x).
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite Hf, EV_V_map_val ; crush.
Qed.

Local Fact V_bind_EV_map_aux2 (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x)) :
‚àÄ x : inc (inc V),
V_lift_inc (V_lift_inc f‚ÇÅ) x = EV_map_val g (V_lift_inc (V_lift_inc f‚ÇÇ) x).
Proof.
destruct x ; simpl ; [ crush | ].  
rewrite EV_V_map_val.
erewrite V_bind_EV_map_aux1 ; crush.
Qed.

Local Fact V_bind_EV_map_aux3 (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (L_shift_val ‚àò f‚ÇÅ) x = EV_map_val g ((L_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite Hf.
rewrite EV_L_map_val ; crush.
Qed.

Local Fact V_bind_EV_map_aux4 (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (EV_shift_val ‚àò f‚ÇÅ) x = EV_map_val (map_inc g) ((EV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite Hf.
repeat erewrite EV_map_map_val ; crush.
Qed.

Local Fact V_bind_EV_map_aux5 (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (HV_shift_val ‚àò f‚ÇÅ) x = EV_map_val g ((HV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite Hf.
rewrite EV_HV_map_val ; crush.
Qed.

Hint Resolve V_bind_EV_map_aux1 V_bind_EV_map_aux2 V_bind_EV_map_aux3
  V_bind_EV_map_aux4 V_bind_EV_map_aux5.

Fixpoint
  V_bind_EV_map_hd (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x))
  (h : hd EV HV V L) {struct h} :
  V_bind_hd f‚ÇÅ (EV_map_hd g h) = EV_map_hd g (V_bind_hd f‚ÇÇ h)
with
  V_bind_EV_map_tm (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x))
  (t : tm EV HV V L) {struct t} :
  V_bind_tm f‚ÇÅ (EV_map_tm g t) = EV_map_tm g (V_bind_tm f‚ÇÇ t)
with
  V_bind_EV_map_val (EV EV' HV V V' L : Set)
  (g : EV ‚Üí EV') (f‚ÇÅ : V ‚Üí val EV' HV V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = EV_map_val g (f‚ÇÇ x))
  (v : val EV HV V L) {struct v} :
  V_bind_val f‚ÇÅ (EV_map_val g v) = EV_map_val g (V_bind_val f‚ÇÇ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite V_bind_EV_map_tm ; 
  crush.
+ destruct t ; simpl ;
  repeat erewrite V_bind_EV_map_tm ; 
  repeat erewrite V_bind_EV_map_val ; 
  repeat erewrite V_bind_EV_map_hd ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite V_bind_EV_map_tm ; 
  repeat erewrite V_bind_EV_map_hd ;
  crush.
Qed.

End section_V_bind_EV_map.


Section section_V_bind_HV_map.

Local Fact V_bind_HV_map_aux1 (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x)) :
  ‚àÄ x : inc V, V_lift_inc f‚ÇÅ x = HV_map_val g (V_lift_inc f‚ÇÇ x).
Proof.
  destruct x ; simpl ; [ trivial | ].
  rewrite Hf.
  rewrite HV_V_map_val ; trivial.
Qed.

Local Fact V_bind_HV_map_aux2 (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x)) :
‚àÄ x : inc (inc V),
V_lift_inc (V_lift_inc f‚ÇÅ) x = HV_map_val g (V_lift_inc (V_lift_inc f‚ÇÇ) x).
Proof.
destruct x ; simpl ; [ crush | ].
rewrite HV_V_map_val.
erewrite V_bind_HV_map_aux1 ; crush.
Qed.

Local Fact V_bind_HV_map_aux3 (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (L_shift_val ‚àò f‚ÇÅ) x = HV_map_val g ((L_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose.
rewrite HV_L_map_val ; crush.
Qed.

Local Fact V_bind_HV_map_aux4 (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (EV_shift_val ‚àò f‚ÇÅ) x = HV_map_val g ((EV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite <- EV_HV_map_val ; crush.
Qed.

Local Fact V_bind_HV_map_aux5 (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (HV_shift_val ‚àò f‚ÇÅ) x = HV_map_val (map_inc g) ((HV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite Hf.
repeat erewrite HV_map_map_val ; crush.
Qed.

Hint Resolve V_bind_HV_map_aux1 V_bind_HV_map_aux2 V_bind_HV_map_aux3
  V_bind_HV_map_aux4 V_bind_HV_map_aux5.

Fixpoint
  V_bind_HV_map_hd (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x))
  (h : hd EV HV V L) {struct h} :
  V_bind_hd f‚ÇÅ (HV_map_hd g h) = HV_map_hd g (V_bind_hd f‚ÇÇ h)
with
  V_bind_HV_map_tm (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x))
  (t : tm EV HV V L) {struct t} :
  V_bind_tm f‚ÇÅ (HV_map_tm g t) = HV_map_tm g (V_bind_tm f‚ÇÇ t)
with
  V_bind_HV_map_val (EV HV HV' V V' L : Set)
  (g : HV ‚Üí HV') (f‚ÇÅ : V ‚Üí val EV HV' V' L) (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = HV_map_val g (f‚ÇÇ x))
  (v : val EV HV V L) {struct v} :
  V_bind_val f‚ÇÅ (HV_map_val g v) = HV_map_val g (V_bind_val f‚ÇÇ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite V_bind_HV_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite V_bind_HV_map_val ;
  repeat erewrite V_bind_HV_map_tm ;
  repeat erewrite V_bind_HV_map_hd ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite V_bind_HV_map_tm ;
  repeat erewrite V_bind_HV_map_hd ;
  crush.
Qed.

End section_V_bind_HV_map.


Section section_V_bind_L_map.

Local Fact V_bind_L_map_aux1
  (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x)) :
  ‚àÄ x : inc V, V_lift_inc f‚ÇÅ x = L_map_val g (V_lift_inc f‚ÇÇ x).
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite Hf, V_L_map_val ; crush.
Qed.

Local Fact V_bind_L_map_aux2
  (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (L_shift_val ‚àò f‚ÇÅ) x = L_map_val (map_inc g) ((L_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite Hf.
repeat erewrite L_map_map_val ; crush.
Qed.

Local Fact V_bind_L_map_aux3
  (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (EV_shift_val ‚àò f‚ÇÅ) x = L_map_val g ((EV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite <- EV_L_map_val ; crush.
Qed.

Local Fact V_bind_L_map_aux4
  (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x)) :
‚àÄ x : V, (HV_shift_val ‚àò f‚ÇÅ) x = L_map_val g ((HV_shift_val ‚àò f‚ÇÇ) x).
Proof.
intro ; unfold compose ; rewrite <- HV_L_map_val ; crush.
Qed.

Hint Resolve V_bind_L_map_aux1 V_bind_L_map_aux2 V_bind_L_map_aux3 V_bind_L_map_aux4.

Fixpoint
  V_bind_L_map_hd (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x))
  (h : hd EV HV V L) {struct h} :
  V_bind_hd f‚ÇÅ (L_map_hd g h) = L_map_hd g (V_bind_hd f‚ÇÇ h)
with
  V_bind_L_map_tm (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x))
  (t : tm EV HV V L) {struct t} :
  V_bind_tm f‚ÇÅ (L_map_tm g t) = L_map_tm g (V_bind_tm f‚ÇÇ t)
with
  V_bind_L_map_val (EV HV V V' L L' : Set)
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x))
  (v : val EV HV V L) {struct v} :
  V_bind_val f‚ÇÅ (L_map_val g v) = L_map_val g (V_bind_val f‚ÇÇ v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite V_bind_L_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite V_bind_L_map_val ;
  repeat erewrite V_bind_L_map_tm ;
  repeat erewrite V_bind_L_map_hd ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite V_bind_L_map_tm ;
  repeat erewrite V_bind_L_map_hd ;
  crush.
Qed.

Fixpoint
  V_bind_L_map_ktx EV HV V V' L L'
  (g : L ‚Üí L') (f‚ÇÅ : V ‚Üí val EV HV V' L') (f‚ÇÇ : V ‚Üí val EV HV V' L)
  (Hf : ‚àÄ x, f‚ÇÅ x = L_map_val g (f‚ÇÇ x))
  (K : ktx EV HV V L) {struct K} :
  V_bind_ktx f‚ÇÅ (L_map_ktx g K) = L_map_ktx g (V_bind_ktx f‚ÇÇ K).
Proof.
destruct K ; simpl ;
repeat erewrite V_bind_L_map_ktx ;
repeat erewrite V_bind_L_map_val ;
repeat erewrite V_bind_L_map_tm ;
repeat erewrite V_bind_L_map_hd ;
crush.
Qed.

End section_V_bind_L_map.


Section section_L_bind_EV_map.

Definition
  L_bind_EV_map_ef (EV EV' HV L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (Œµ : ef EV HV L) :
  L_bind_ef f (EV_map_ef g Œµ) = EV_map_ef g (L_bind_ef f Œµ)
.
Proof.
destruct Œµ ; simpl ; crush.
Qed.

Hint Rewrite L_bind_EV_map_ef.

Fixpoint
  L_bind_EV_map_eff (EV EV' HV L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (ùìî : eff EV HV L) {struct ùìî} :
  L_bind_eff f (EV_map_eff g ùìî) = EV_map_eff g (L_bind_eff f ùìî)
.
Proof.
destruct ùìî ; simpl ; crush.
Qed.

Hint Rewrite L_bind_EV_map_eff.

Fixpoint
  L_bind_EV_map_ty (EV EV' HV L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (T : ty EV HV L) {struct T} :
  L_bind_ty f (EV_map_ty g T) = EV_map_ty g (L_bind_ty f T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite L_bind_EV_map_ty ;
  repeat erewrite L_bind_EV_map_eff ;
  crush.
Qed.

Fixpoint
  L_bind_EV_map_hd (EV EV' HV V L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (h : hd EV HV V L) {struct h} :
  L_bind_hd f (EV_map_hd g h) = EV_map_hd g (L_bind_hd f h)
with
  L_bind_EV_map_tm (EV EV' HV V L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (t : tm EV HV V L) {struct t} :
  L_bind_tm f (EV_map_tm g t) = EV_map_tm g (L_bind_tm f t)
with
  L_bind_EV_map_val (EV EV' HV V L L' : Set)
  (g : EV ‚Üí EV') (f : L ‚Üí lid L')
  (v : val EV HV V L) {struct v} :
  L_bind_val f (EV_map_val g v) = EV_map_val g (L_bind_val f v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite L_bind_EV_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite L_bind_EV_map_ty ;
  repeat erewrite L_bind_EV_map_eff ;
  repeat erewrite L_bind_EV_map_val ;
  repeat erewrite L_bind_EV_map_tm ;
  repeat erewrite L_bind_EV_map_hd ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite L_bind_EV_map_tm ;
  repeat erewrite L_bind_EV_map_hd ;
  crush.
Qed.

End section_L_bind_EV_map.


Section section_L_bind_HV_map.

Definition
  L_bind_HV_map_lbl (EV HV HV' L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (‚Ñì : lbl HV L) :
  L_bind_lbl f (HV_map_lbl g ‚Ñì) = HV_map_lbl g (L_bind_lbl f ‚Ñì)
.
Proof.
destruct ‚Ñì ; simpl ; crush.
Qed.

Hint Rewrite L_bind_HV_map_lbl.

Definition
  L_bind_HV_map_ef (EV HV HV' L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (Œµ : ef EV HV L) :
  L_bind_ef f (HV_map_ef g Œµ) = HV_map_ef g (L_bind_ef f Œµ)
.
Proof.
destruct Œµ ; simpl ; crush.
Qed.

Hint Rewrite L_bind_HV_map_ef.

Fixpoint
  L_bind_HV_map_eff (EV HV HV' L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (ùìî : eff EV HV L) {struct ùìî} :
  L_bind_eff f (HV_map_eff g ùìî) = HV_map_eff g (L_bind_eff f ùìî)
.
Proof.
destruct ùìî ; simpl ; crush.
Qed.

Hint Rewrite L_bind_HV_map_eff.

Fixpoint
  L_bind_HV_map_ty (EV HV HV' L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (T : ty EV HV L) {struct T} :
  L_bind_ty f (HV_map_ty g T) = HV_map_ty g (L_bind_ty f T)
.
Proof.
+ destruct T ; simpl ;
  repeat erewrite L_bind_HV_map_ty ;
  repeat erewrite L_bind_HV_map_eff ;
  crush.
Qed.

Fixpoint
  L_bind_HV_map_hd (EV HV HV' V L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (h : hd EV HV V L) {struct h} :
  L_bind_hd f (HV_map_hd g h) = HV_map_hd g (L_bind_hd f h)
with
  L_bind_HV_map_tm (EV HV HV' V L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (t : tm EV HV V L) {struct t} :
  L_bind_tm f (HV_map_tm g t) = HV_map_tm g (L_bind_tm f t)
with
  L_bind_HV_map_val (EV HV HV' V L L' : Set)
  (g : HV ‚Üí HV') (f : L ‚Üí lid L')
  (v : val EV HV V L) {struct v} :
  L_bind_val f (HV_map_val g v) = HV_map_val g (L_bind_val f v).
Proof.
+ destruct h ; simpl ;
  repeat erewrite L_bind_HV_map_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite L_bind_HV_map_ty ;
  repeat erewrite L_bind_HV_map_eff ;
  repeat erewrite L_bind_HV_map_val ;
  repeat erewrite L_bind_HV_map_tm ;
  repeat erewrite L_bind_HV_map_hd ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite L_bind_HV_map_tm ;
  repeat erewrite L_bind_HV_map_hd ;
  crush.
Qed.

End section_L_bind_HV_map.
