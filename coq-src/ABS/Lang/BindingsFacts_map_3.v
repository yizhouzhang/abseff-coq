Require Import Lang.Syntax Lang.Bindings_map Lang.BindingsFacts_map_0.
Set Implicit Arguments.

Section section_EV_L_map.

Definition
  EV_L_map_ef (EV EV' HV L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (Œµ : ef EV HV L) :
  EV_map_ef f‚ÇÅ (L_map_ef f‚ÇÇ Œµ) = L_map_ef f‚ÇÇ (EV_map_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; crush.
Qed.

Hint Rewrite EV_L_map_ef.

Fixpoint
  EV_L_map_eff (EV EV' HV L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (ùìî : eff EV HV L) {struct ùìî} :
  EV_map_eff f‚ÇÅ (L_map_eff f‚ÇÇ ùìî) = L_map_eff f‚ÇÇ (EV_map_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; crush.
Qed.

Hint Rewrite EV_L_map_eff.

Fixpoint
  EV_L_map_ty (EV EV' HV L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (T : ty EV HV L) {struct T} :
  EV_map_ty f‚ÇÅ (L_map_ty f‚ÇÇ T) = L_map_ty f‚ÇÇ (EV_map_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; crush.
Qed.

Hint Rewrite EV_L_map_ty.

Fixpoint
  EV_L_map_hd (EV EV' HV V L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (h : hd EV HV V L) {struct h} :
  EV_map_hd f‚ÇÅ (L_map_hd f‚ÇÇ h) = L_map_hd f‚ÇÇ (EV_map_hd f‚ÇÅ h)
with
  EV_L_map_val (EV EV' HV V L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (v : val EV HV V L) {struct v} :
  EV_map_val f‚ÇÅ (L_map_val f‚ÇÇ v) = L_map_val f‚ÇÇ (EV_map_val f‚ÇÅ v)
with
  EV_L_map_tm (EV EV' HV V L L' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : L ‚Üí L')
  (t : tm EV HV V L) {struct t} :
  EV_map_tm f‚ÇÅ (L_map_tm f‚ÇÇ t) = L_map_tm f‚ÇÇ (EV_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.

End section_EV_L_map.


Section section_HV_L_map.

Definition
  HV_L_map_lbl (HV HV' L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (‚Ñì : lbl HV L) :
  HV_map_lbl f‚ÇÅ (L_map_lbl f‚ÇÇ ‚Ñì) = L_map_lbl f‚ÇÇ (HV_map_lbl f‚ÇÅ ‚Ñì)
.
Proof.
destruct ‚Ñì ; crush.
Qed.

Hint Rewrite HV_L_map_lbl.

Definition
  HV_L_map_ef (EV HV HV' L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (Œµ : ef EV HV L) :
  HV_map_ef f‚ÇÅ (L_map_ef f‚ÇÇ Œµ) = L_map_ef f‚ÇÇ (HV_map_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; crush.
Qed.

Hint Rewrite HV_L_map_ef.

Fixpoint
  HV_L_map_eff (EV HV HV' L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (ùìî : eff EV HV L) {struct ùìî} :
  HV_map_eff f‚ÇÅ (L_map_eff f‚ÇÇ ùìî) = L_map_eff f‚ÇÇ (HV_map_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; crush.
Qed.

Hint Rewrite HV_L_map_eff.

Fixpoint
  HV_L_map_ty (EV HV HV' L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (T : ty EV HV L) {struct T} :
  HV_map_ty f‚ÇÅ (L_map_ty f‚ÇÇ T) = L_map_ty f‚ÇÇ (HV_map_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; crush.
Qed.

Hint Rewrite HV_L_map_ty.

Fixpoint
  HV_L_map_hd (EV HV HV' V L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (h : hd EV HV V L) {struct h} :
  HV_map_hd f‚ÇÅ (L_map_hd f‚ÇÇ h) = L_map_hd f‚ÇÇ (HV_map_hd f‚ÇÅ h)
with
  HV_L_map_val (EV HV HV' V L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (v : val EV HV V L) {struct v} :
  HV_map_val f‚ÇÅ (L_map_val f‚ÇÇ v) = L_map_val f‚ÇÇ (HV_map_val f‚ÇÅ v)
with
  HV_L_map_tm (EV HV HV' V L L' : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : L ‚Üí L')
  (t : tm EV HV V L) {struct t} :
  HV_map_tm f‚ÇÅ (L_map_tm f‚ÇÇ t) = L_map_tm f‚ÇÇ (HV_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.

End section_HV_L_map.


Section section_EV_HV_map.

Definition
  EV_HV_map_ef (EV EV' HV HV' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (Œµ : ef EV HV L) :
  EV_map_ef f‚ÇÅ (HV_map_ef f‚ÇÇ Œµ) = HV_map_ef f‚ÇÇ (EV_map_ef f‚ÇÅ Œµ)
.
Proof.
destruct Œµ ; crush.
Qed.

Hint Rewrite EV_HV_map_ef.

Fixpoint
  EV_HV_map_eff (EV EV' HV HV' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (ùìî : eff EV HV L) {struct ùìî} :
  EV_map_eff f‚ÇÅ (HV_map_eff f‚ÇÇ ùìî) = HV_map_eff f‚ÇÇ (EV_map_eff f‚ÇÅ ùìî)
.
Proof.
destruct ùìî ; crush.
Qed.

Hint Rewrite EV_HV_map_eff.

Fixpoint
  EV_HV_map_ty (EV EV' HV HV' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (T : ty EV HV L) {struct T} :
  EV_map_ty f‚ÇÅ (HV_map_ty f‚ÇÇ T) = HV_map_ty f‚ÇÇ (EV_map_ty f‚ÇÅ T)
.
Proof.
+ destruct T ; crush.
Qed.

Hint Rewrite EV_HV_map_ty.

Fixpoint
  EV_HV_map_hd (EV EV' HV HV' V L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (h : hd EV HV V L) {struct h} :
  EV_map_hd f‚ÇÅ (HV_map_hd f‚ÇÇ h) = HV_map_hd f‚ÇÇ (EV_map_hd f‚ÇÅ h)
with
  EV_HV_map_val (EV EV' HV HV' V L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (v : val EV HV V L) {struct v} :
  EV_map_val f‚ÇÅ (HV_map_val f‚ÇÇ v) = HV_map_val f‚ÇÇ (EV_map_val f‚ÇÅ v)
with
  EV_HV_map_tm (EV EV' HV HV' V L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
  (t : tm EV HV V L) {struct t} :
  EV_map_tm f‚ÇÅ (HV_map_tm f‚ÇÇ t) = HV_map_tm f‚ÇÇ (EV_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.

Lemma EV_HV_map_XEnv
(EV EV' HV HV' : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : HV ‚Üí HV')
(Œû : XEnv EV HV) :
EV_map_XEnv f‚ÇÅ (HV_map_XEnv f‚ÇÇ Œû) = HV_map_XEnv f‚ÇÇ (EV_map_XEnv f‚ÇÅ Œû).
Proof.
induction Œû as [ | ? ? [] ] using env_ind.
+ repeat rewrite EV_map_XEnv_empty, HV_map_XEnv_empty ; reflexivity.
+ repeat rewrite EV_map_XEnv_concat, HV_map_XEnv_concat,
    EV_map_XEnv_single, HV_map_XEnv_single.
  rewrite EV_HV_map_ty, EV_HV_map_eff, IHŒû.
  reflexivity.
Qed.

End section_EV_HV_map.


Fixpoint
  EV_V_map_hd (EV EV' HV V V' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : V ‚Üí V')
  (h : hd EV HV V L) {struct h} :
  EV_map_hd f‚ÇÅ (V_map_hd f‚ÇÇ h) = V_map_hd f‚ÇÇ (EV_map_hd f‚ÇÅ h)
with
  EV_V_map_val (EV EV' HV V V' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : V ‚Üí V')
  (v : val EV HV V L) {struct v} :
  EV_map_val f‚ÇÅ (V_map_val f‚ÇÇ v) = V_map_val f‚ÇÇ (EV_map_val f‚ÇÅ v)
with
  EV_V_map_tm (EV EV' HV V V' L : Set) (f‚ÇÅ : EV ‚Üí EV') (f‚ÇÇ : V ‚Üí V')
  (t : tm EV HV V L) {struct t} :
  EV_map_tm f‚ÇÅ (V_map_tm f‚ÇÇ t) = V_map_tm f‚ÇÇ (EV_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.


Fixpoint
  HV_V_map_hd (EV HV HV' V V' L : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : V ‚Üí V')
  (h : hd EV HV V L) {struct h} :
  HV_map_hd f‚ÇÅ (V_map_hd f‚ÇÇ h) = V_map_hd f‚ÇÇ (HV_map_hd f‚ÇÅ h)
with
  HV_V_map_val (EV HV HV' V V' L : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : V ‚Üí V')
  (v : val EV HV V L) {struct v} :
  HV_map_val f‚ÇÅ (V_map_val f‚ÇÇ v) = V_map_val f‚ÇÇ (HV_map_val f‚ÇÅ v)
with
  HV_V_map_tm (EV HV HV' V V' L : Set) (f‚ÇÅ : HV ‚Üí HV') (f‚ÇÇ : V ‚Üí V')
  (t : tm EV HV V L) {struct t} :
  HV_map_tm f‚ÇÅ (V_map_tm f‚ÇÇ t) = V_map_tm f‚ÇÇ (HV_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.

Fixpoint
  V_L_map_hd (EV HV V V' L L' : Set) (f‚ÇÅ : V ‚Üí V') (f‚ÇÇ : L ‚Üí L')
  (h : hd EV HV V L) {struct h} :
  V_map_hd f‚ÇÅ (L_map_hd f‚ÇÇ h) = L_map_hd f‚ÇÇ (V_map_hd f‚ÇÅ h)
with
  V_L_map_val (EV HV V V' L L' : Set) (f‚ÇÅ : V ‚Üí V') (f‚ÇÇ : L ‚Üí L')
  (v : val EV HV V L) {struct v} :
  V_map_val f‚ÇÅ (L_map_val f‚ÇÇ v) = L_map_val f‚ÇÇ (V_map_val f‚ÇÅ v)
with
  V_L_map_tm (EV HV V V' L L' : Set) (f‚ÇÅ : V ‚Üí V') (f‚ÇÇ : L ‚Üí L')
  (t : tm EV HV V L) {struct t} :
  V_map_tm f‚ÇÅ (L_map_tm f‚ÇÇ t) = L_map_tm f‚ÇÇ (V_map_tm f‚ÇÅ t)
.
Proof.
+ destruct h ; crush.
+ destruct v ; crush.
+ destruct t ; crush.
Qed.

Fixpoint
  V_L_map_ktx (EV HV V V' L L' : Set) (f‚ÇÅ : V ‚Üí V') (f‚ÇÇ : L ‚Üí L')
  (K : ktx EV HV V L) {struct K} :
  V_map_ktx f‚ÇÅ (L_map_ktx f‚ÇÇ K) = L_map_ktx f‚ÇÇ (V_map_ktx f‚ÇÅ K).
Proof.
destruct K ; simpl ;
repeat rewrite V_L_map_ktx ;
repeat rewrite V_L_map_tm ;
repeat rewrite V_L_map_val ;
repeat rewrite V_L_map_hd ;
crush.
Qed.
