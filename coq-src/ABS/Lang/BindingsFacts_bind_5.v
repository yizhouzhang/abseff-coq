Require Import Lang.Syntax Lang.Bindings.
Require Import Lang.BindingsFacts_map_0.
Require Import Lang.BindingsFacts_map_1.
Require Import Lang.BindingsFacts_bind_0.
Require Import Lang.BindingsFacts_bind_2.
Require Import Lang.BindingsFacts_bind_3.
Require Import Lang.BindingsFacts_bind_4.
Set Implicit Arguments.

Section section_EV_bind_bind.

Local Fact EV_bind_bind_aux1 (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±) :
  ‚àÄ Œ± : inc EV‚ÇÅ, EV_bind_eff (EV_lift_inc f‚ÇÇ) (EV_lift_inc f‚ÇÅ Œ±) = EV_lift_inc g Œ±.
Proof.
  destruct Œ± ; simpl ; [ crush | ].
  rewrite <- Hfg.
  repeat erewrite EV_bind_map_eff ; crush.
Qed.

Local Fact EV_bind_bind_aux2 (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±) :
  ‚àÄ Œ± : EV‚ÇÅ,
  EV_bind_eff (HV_shift_eff ‚àò f‚ÇÇ) ((HV_shift_eff ‚àò f‚ÇÅ) Œ±) = (HV_shift_eff ‚àò g) Œ±.
Proof.
  intro ; unfold compose.
  rewrite <- Hfg.
  erewrite EV_bind_HV_map_eff ; crush.
Qed.

Local Fact EV_bind_bind_aux3 (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±) :
  ‚àÄ Œ± : EV‚ÇÅ,
  EV_bind_eff (L_shift_eff ‚àò f‚ÇÇ) ((L_shift_eff ‚àò f‚ÇÅ) Œ±) = (L_shift_eff ‚àò g) Œ±.
Proof.
  intro ; unfold compose ; rewrite <- Hfg.
  erewrite EV_bind_L_map_eff ; crush.
Qed.

Hint Resolve EV_bind_bind_aux1 EV_bind_bind_aux2 EV_bind_bind_aux3.

Fixpoint
  EV_bind_bind_ef (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (Œµ : ef EV‚ÇÅ HV L) :
  EV_bind_eff f‚ÇÇ (EV_bind_ef f‚ÇÅ Œµ) = EV_bind_ef g Œµ
.
Proof.
+ destruct Œµ ; simpl ;
  repeat erewrite EV_bind_bind_lbl ;
  crush.
Qed.

Fixpoint
  EV_bind_bind_eff (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (ùìî : eff EV‚ÇÅ HV L) {struct ùìî} :
  EV_bind_eff f‚ÇÇ (EV_bind_eff f‚ÇÅ ùìî) = EV_bind_eff g ùìî
.
Proof.
+ destruct ùìî ; simpl ; [ crush | ].
  rewrite <- EV_bind_eff_app.
  erewrite EV_bind_bind_ef, EV_bind_bind_eff ; crush.
Qed.

Fixpoint
  EV_bind_bind_ty (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hfg : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (T : ty EV‚ÇÅ HV L) {struct T} :
  EV_bind_ty f‚ÇÇ (EV_bind_ty f‚ÇÅ T) = EV_bind_ty g T.
Proof.
+ destruct T ; simpl ;
  repeat erewrite EV_bind_bind_ty ;
  repeat erewrite EV_bind_bind_eff ;
  crush.
Qed.

Fixpoint
  EV_bind_bind_hd (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV V L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hf : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (h : hd EV‚ÇÅ HV V L) {struct h} :
  EV_bind_hd f‚ÇÇ (EV_bind_hd f‚ÇÅ h) = EV_bind_hd g h
with
  EV_bind_bind_tm (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV V L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hf : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (t : tm EV‚ÇÅ HV V L) {struct t} :
  EV_bind_tm f‚ÇÇ (EV_bind_tm f‚ÇÅ t) = EV_bind_tm g t
with
  EV_bind_bind_val (EV‚ÇÅ EV‚ÇÇ EV‚ÇÉ HV V L : Set)
  (f‚ÇÅ : EV‚ÇÅ ‚Üí eff EV‚ÇÇ HV L) (f‚ÇÇ : EV‚ÇÇ ‚Üí eff EV‚ÇÉ HV L)
  (g : EV‚ÇÅ ‚Üí eff EV‚ÇÉ HV L)
  (Hf : ‚àÄ Œ±, EV_bind_eff f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (v : val EV‚ÇÅ HV V L) {struct v} :
  EV_bind_val f‚ÇÇ (EV_bind_val f‚ÇÅ v) = EV_bind_val g v.
Proof.
+ destruct h ; simpl ;
  repeat erewrite EV_bind_bind_tm ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite EV_bind_bind_ty ;
  repeat erewrite EV_bind_bind_eff ;
  repeat erewrite EV_bind_bind_hd ;
  repeat erewrite EV_bind_bind_val ;
  repeat erewrite EV_bind_bind_tm ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite EV_bind_bind_tm ;
  repeat erewrite EV_bind_bind_hd ;
  crush.
Qed.

End section_EV_bind_bind.


Section section_HV_bind_bind.

Local Fact HV_bind_bind_aux1
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V L)
  (Hfg : ‚àÄ p, HV_bind_hd f‚ÇÇ (f‚ÇÅ p) = g p) :
  ‚àÄ p : inc HV‚ÇÅ, HV_bind_hd (HV_lift_inc f‚ÇÇ) (HV_lift_inc f‚ÇÅ p) = HV_lift_inc g p.
Proof.
  destruct p ; simpl ; [ trivial | ].
  rewrite <- Hfg.
  erewrite HV_bind_map_hd ; crush.
Qed.

Local Fact HV_bind_bind_aux2
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V L)
  (Hfg : ‚àÄ p, HV_bind_hd f‚ÇÇ (f‚ÇÅ p) = g p) :
  ‚àÄ p : HV‚ÇÅ,
  HV_bind_hd (L_shift_hd ‚àò f‚ÇÇ) ((L_shift_hd ‚àò f‚ÇÅ) p) = (L_shift_hd ‚àò g) p.
Proof.
  intro ; unfold compose ; rewrite <- Hfg.
  erewrite HV_bind_L_map_hd ; crush.
Qed.

Hint Resolve HV_bind_bind_aux1 HV_bind_bind_aux2.
Hint Rewrite lbl_HV_map_hd lbl_EV_map_hd.

Definition
  HV_bind_bind_lbl
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V V' L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V' L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V' L)
  (Hfg : ‚àÄ p, HV_bind_lbl f‚ÇÇ (lbl_hd (f‚ÇÅ p)) = lbl_hd (g p))
  (‚Ñì : lbl HV‚ÇÅ L) :
  HV_bind_lbl f‚ÇÇ (HV_bind_lbl f‚ÇÅ ‚Ñì) = HV_bind_lbl g ‚Ñì
.
Proof.
  destruct ‚Ñì ; crush.
Qed.

Definition
  HV_bind_bind_ef
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V V' L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V' L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V' L)
  (Hfg : ‚àÄ p, HV_bind_lbl f‚ÇÇ (lbl_hd (f‚ÇÅ p)) = lbl_hd (g p))
  (Œµ : ef EV HV‚ÇÅ L) :
  HV_bind_ef f‚ÇÇ (HV_bind_ef f‚ÇÅ Œµ) = HV_bind_ef g Œµ
.
Proof.
  destruct Œµ ; simpl ;
  repeat erewrite HV_bind_bind_lbl ;
  crush.
Qed.

Fixpoint
  HV_bind_bind_eff
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V V' L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V' L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V' L)
  (Hfg : ‚àÄ p, HV_bind_lbl f‚ÇÇ (lbl_hd (f‚ÇÅ p)) = lbl_hd (g p))
  (ùìî : eff EV HV‚ÇÅ L) {struct ùìî} :
  HV_bind_eff f‚ÇÇ (HV_bind_eff f‚ÇÅ ùìî) = HV_bind_eff g ùìî
.
Proof.
  destruct ùìî ; simpl ;
  repeat erewrite HV_bind_bind_ef ;
  repeat erewrite HV_bind_bind_eff ;
  crush.
Qed.

Fixpoint
  HV_bind_bind_ty
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V V' L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V' L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V' L)
  (Hfg : ‚àÄ p, HV_bind_lbl f‚ÇÇ (lbl_hd (f‚ÇÅ p)) = lbl_hd (g p))
  (T : ty EV HV‚ÇÅ L) {struct T} :
  HV_bind_ty f‚ÇÇ (HV_bind_ty f‚ÇÅ T) = HV_bind_ty g T.
Proof.
+ destruct T ; simpl ;
  repeat erewrite HV_bind_bind_ty ;
  repeat erewrite HV_bind_bind_eff ;
  try reflexivity ;
  try assumption.
  { intro ; unfold compose.
    repeat rewrite lbl_EV_map_hd.
    rewrite <- Hfg.
    clear ; destruct (lbl_hd (f‚ÇÅ p)) ; crush.
  }
  { intro x ; destruct x ; simpl ; [ crush | ].
    repeat rewrite lbl_HV_map_hd.
    rewrite <- Hfg.
    erewrite HV_bind_map_lbl ; crush.
  }
Qed.

Fixpoint
  HV_bind_bind_hd
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V L)
  (Hfg : ‚àÄ p, HV_bind_hd f‚ÇÇ (f‚ÇÅ p) = g p)
  (h : hd EV HV‚ÇÅ V L) {struct h} :
  HV_bind_hd f‚ÇÇ (HV_bind_hd f‚ÇÅ h) = HV_bind_hd g h
with
  HV_bind_bind_tm
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V L)
  (Hfg : ‚àÄ p, HV_bind_hd f‚ÇÇ (f‚ÇÅ p) = g p)
  (t : tm EV HV‚ÇÅ V L) {struct t} :
  HV_bind_tm f‚ÇÇ (HV_bind_tm f‚ÇÅ t) = HV_bind_tm g t
with
  HV_bind_bind_val
  (EV HV‚ÇÅ HV‚ÇÇ HV‚ÇÉ V L : Set)
  (f‚ÇÅ : HV‚ÇÅ ‚Üí hd EV HV‚ÇÇ V L) (f‚ÇÇ : HV‚ÇÇ ‚Üí hd EV HV‚ÇÉ V L)
  (g : HV‚ÇÅ ‚Üí hd EV HV‚ÇÉ V L)
  (Hfg : ‚àÄ p, HV_bind_hd f‚ÇÇ (f‚ÇÅ p) = g p)
  (v : val EV HV‚ÇÅ V L) {struct v} :
  HV_bind_val f‚ÇÇ (HV_bind_val f‚ÇÅ v) = HV_bind_val g v.
Proof.
+ destruct h ; simpl ;
  repeat erewrite HV_bind_bind_tm ;
  try reflexivity.
  { crush. }
  { intro ; unfold compose ; repeat erewrite HV_bind_V_map_hd ; crush. }
+ destruct t ; simpl ;
  repeat erewrite HV_bind_bind_ty ;
  repeat erewrite HV_bind_bind_eff ;
  repeat erewrite HV_bind_bind_hd ;
  repeat erewrite HV_bind_bind_val ;
  repeat erewrite HV_bind_bind_tm ;
  try reflexivity ;
  try assumption.
  { intro ; rewrite <- Hfg.
    erewrite lbl_HV_bind_hd ; crush.
  }
  { intro ; unfold compose ; erewrite HV_bind_V_map_hd ; crush. }
  { crush. }
+ destruct v ; simpl ;
  repeat erewrite HV_bind_bind_tm ;
  repeat erewrite HV_bind_bind_hd ;
  try reflexivity ;
  try assumption.
  { intro ; unfold compose ; erewrite HV_bind_V_map_hd ; crush. }
  { intro ; unfold compose ; erewrite HV_bind_EV_map_hd ; crush. }
  { intro x ; destruct x ; simpl ; [ crush | ].
    erewrite HV_bind_map_hd ; crush. }
Qed.

End section_HV_bind_bind.


Section section_V_bind_bind.

Local Fact V_bind_bind_aux1 (EV HV V‚ÇÅ V‚ÇÇ V‚ÇÉ L : Set)
  (f‚ÇÅ : V‚ÇÅ ‚Üí val EV HV V‚ÇÇ L) (f‚ÇÇ : V‚ÇÇ ‚Üí val EV HV V‚ÇÉ L)
  (g : V‚ÇÅ ‚Üí val EV HV V‚ÇÉ L)
  (Hf : ‚àÄ x, V_bind_val f‚ÇÇ (f‚ÇÅ x) = g x) :
  ‚àÄ x : inc V‚ÇÅ, V_bind_val (V_lift_inc f‚ÇÇ) (V_lift_inc f‚ÇÅ x) = V_lift_inc g x.
Proof.
  destruct x ; simpl ; [ crush | ].
  rewrite <- Hf.
  erewrite V_bind_map_val ; crush.
Qed.

Local Fact V_bind_bind_aux2 (EV HV V‚ÇÅ V‚ÇÇ V‚ÇÉ L : Set)
  (f‚ÇÅ : V‚ÇÅ ‚Üí val EV HV V‚ÇÇ L) (f‚ÇÇ : V‚ÇÇ ‚Üí val EV HV V‚ÇÉ L)
  (g : V‚ÇÅ ‚Üí val EV HV V‚ÇÉ L)
  (Hf : ‚àÄ x, V_bind_val f‚ÇÇ (f‚ÇÅ x) = g x) :
  ‚àÄ x : V‚ÇÅ,
  V_bind_val (L_shift_val ‚àò f‚ÇÇ) ((L_shift_val ‚àò f‚ÇÅ) x) = (L_shift_val ‚àò g) x.
Proof.
  intro ; unfold compose ; rewrite <- Hf.
  erewrite V_bind_L_map_val ; crush.
Qed.

Hint Resolve V_bind_bind_aux1 V_bind_bind_aux2.

Fixpoint
  V_bind_bind_hd (EV HV V‚ÇÅ V‚ÇÇ V‚ÇÉ L : Set)
  (f‚ÇÅ : V‚ÇÅ ‚Üí val EV HV V‚ÇÇ L) (f‚ÇÇ : V‚ÇÇ ‚Üí val EV HV V‚ÇÉ L)
  (g : V‚ÇÅ ‚Üí val EV HV V‚ÇÉ L)
  (Hf : ‚àÄ x, V_bind_val f‚ÇÇ (f‚ÇÅ x) = g x)
  (h : hd EV HV V‚ÇÅ L) {struct h} :
  V_bind_hd f‚ÇÇ (V_bind_hd f‚ÇÅ h) = V_bind_hd g h
with
  V_bind_bind_tm (EV HV V‚ÇÅ V‚ÇÇ V‚ÇÉ L : Set)
  (f‚ÇÅ : V‚ÇÅ ‚Üí val EV HV V‚ÇÇ L) (f‚ÇÇ : V‚ÇÇ ‚Üí val EV HV V‚ÇÉ L)
  (g : V‚ÇÅ ‚Üí val EV HV V‚ÇÉ L)
  (Hf : ‚àÄ x, V_bind_val f‚ÇÇ (f‚ÇÅ x) = g x)
  (t : tm EV HV V‚ÇÅ L) {struct t} :
  V_bind_tm f‚ÇÇ (V_bind_tm f‚ÇÅ t) = V_bind_tm g t
with
  V_bind_bind_val (EV HV V‚ÇÅ V‚ÇÇ V‚ÇÉ L : Set)
  (f‚ÇÅ : V‚ÇÅ ‚Üí val EV HV V‚ÇÇ L) (f‚ÇÇ : V‚ÇÇ ‚Üí val EV HV V‚ÇÉ L)
  (g : V‚ÇÅ ‚Üí val EV HV V‚ÇÉ L)
  (Hf : ‚àÄ x, V_bind_val f‚ÇÇ (f‚ÇÅ x) = g x)
  (v : val EV HV V‚ÇÅ L) {struct v} :
  V_bind_val f‚ÇÇ (V_bind_val f‚ÇÅ v) = V_bind_val g v.
Proof.
+ destruct h ; simpl ;
  repeat erewrite V_bind_bind_tm ;
  try reflexivity.
  { intro x ; destruct x as [ | x] ; simpl ; [ crush | ].
    destruct x ; simpl ; [ crush | ].
    repeat erewrite V_bind_map_val ; crush.
    simpl ; crush. }
+ destruct t ; simpl ;
  repeat erewrite V_bind_bind_ty ;
  repeat erewrite V_bind_bind_eff ;
  repeat erewrite V_bind_bind_hd ;
  repeat erewrite V_bind_bind_val ;
  repeat erewrite V_bind_bind_tm ;
  crush.
+ destruct v ; simpl ;
  repeat erewrite V_bind_bind_hd ;
  repeat erewrite V_bind_bind_tm ;
  try reflexivity ;
  try assumption.
  { crush. }
  { intro x ; destruct x ; simpl ; [ crush | ].
    erewrite V_bind_map_val ; crush. }
  { intro ; unfold compose ; erewrite V_bind_EV_map_val ; crush. }
  { intro ; unfold compose ; erewrite V_bind_HV_map_val ; crush. }
Qed.

End section_V_bind_bind.


Section section_L_bind_bind.

Definition
  L_bind_bind_lid
  (L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (i : lid L‚ÇÅ) :
  L_bind_lid f‚ÇÇ (L_bind_lid f‚ÇÅ i) = L_bind_lid g i
.
Proof.
  destruct i ; simpl ; crush.
Qed.

Definition
  L_bind_bind_lbl
  (HV L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (‚Ñì : lbl HV L‚ÇÅ) :
  L_bind_lbl f‚ÇÇ (L_bind_lbl f‚ÇÅ ‚Ñì) = L_bind_lbl g ‚Ñì
.
Proof.
  destruct ‚Ñì ; simpl ; [ crush | ].
  erewrite L_bind_bind_lid ; crush.
Qed.

Definition
  L_bind_bind_ef
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (Œµ : ef EV HV L‚ÇÅ) :
  L_bind_ef f‚ÇÇ (L_bind_ef f‚ÇÅ Œµ) = L_bind_ef g Œµ
.
Proof.
  destruct Œµ ; simpl ;
  repeat erewrite L_bind_bind_lbl ;
  crush.
Qed.

Fixpoint
  L_bind_bind_eff
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (ùìî : eff EV HV L‚ÇÅ) {struct ùìî} :
  L_bind_eff f‚ÇÇ (L_bind_eff f‚ÇÅ ùìî) = L_bind_eff g ùìî
.
Proof.
  destruct ùìî ; simpl ;
  repeat erewrite L_bind_bind_ef ;
  repeat erewrite L_bind_bind_eff ;
  crush.
Qed.

Fixpoint
  L_bind_bind_ty
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (T : ty EV HV L‚ÇÅ) {struct T} :
  L_bind_ty f‚ÇÇ (L_bind_ty f‚ÇÅ T) = L_bind_ty g T.
Proof.
+ destruct T ; simpl ;
  repeat erewrite L_bind_bind_ty ;
  repeat erewrite L_bind_bind_eff ;
  crush.
Qed.

Fixpoint
  L_bind_bind_hd
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (h : hd EV HV V L‚ÇÅ) {struct h} :
  L_bind_hd f‚ÇÇ (L_bind_hd f‚ÇÅ h) = L_bind_hd g h
with
  L_bind_bind_tm
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (t : tm EV HV V L‚ÇÅ) {struct t} :
  L_bind_tm f‚ÇÇ (L_bind_tm f‚ÇÅ t) = L_bind_tm g t
with
  L_bind_bind_val
  (EV HV V L‚ÇÅ L‚ÇÇ L‚ÇÉ : Set)
  (f‚ÇÅ : L‚ÇÅ ‚Üí lid L‚ÇÇ) (f‚ÇÇ : L‚ÇÇ ‚Üí lid L‚ÇÉ)
  (g : L‚ÇÅ ‚Üí lid L‚ÇÉ)
  (Q : ‚àÄ Œ±, L_bind_lid f‚ÇÇ (f‚ÇÅ Œ±) = g Œ±)
  (v : val EV HV V L‚ÇÅ) {struct v} :
  L_bind_val f‚ÇÇ (L_bind_val f‚ÇÅ v) = L_bind_val g v.
Proof.
+ destruct h ; simpl ;
  repeat erewrite L_bind_bind_tm ;
  repeat erewrite L_bind_bind_lid ;
  crush.
+ destruct t ; simpl ;
  repeat erewrite L_bind_bind_ty ;
  repeat erewrite L_bind_bind_eff ;
  repeat erewrite L_bind_bind_hd ;
  repeat erewrite L_bind_bind_val ;
  repeat erewrite L_bind_bind_tm ;
  try reflexivity ;
  try assumption.
  { intro x ; destruct x ; simpl ; [ crush | ].
    erewrite L_bind_map_lid ; crush. }
+ destruct v ; simpl ;
  repeat erewrite L_bind_bind_tm ;
  repeat erewrite L_bind_bind_hd ;
  crush.
Qed.

End section_L_bind_bind.
